// Script de d√©bogage pour les snapshots - √Ä ex√©cuter dans la console du navigateur
console.log('üîç Script de d√©bogage des snapshots charg√©');

// Fonction de diagnostic compl√®te
async function debugSnapshots() {
    console.log('üöÄ D√©but du diagnostic des snapshots...');
    
    try {
        // 1. V√©rifier que supabase est initialis√©
        if (!window.supabase) {
            console.error('‚ùå Client Supabase non initialis√©');
            console.log('√âtat de window.supabase:', window.supabase);
            return;
        }
        
        console.log('‚úÖ Client Supabase trouv√©:', window.supabase);
        
        // 2. Tester la connexion de base
        console.log('üîÑ Test de connexion de base...');
        const { data: testData, error: testError } = await window.supabase
            .from('staffTable')
            .select('count')
            .limit(1);
        
        if (testError) {
            console.error('‚ùå Erreur de connexion de base:', testError);
            return;
        }
        
        console.log('‚úÖ Connexion de base r√©ussie');
        
        // 3. V√©rifier la table des snapshots
        console.log('üîÑ V√©rification de la table table_snapshots_index...');
        const { data: snapshots, error: snapshotsError } = await window.supabase
            .from('table_snapshots_index')
            .select('*');
        
        if (snapshotsError) {
            console.error('‚ùå Erreur d\'acc√®s √† la table des snapshots:', snapshotsError);
            
            // Analyser le type d'erreur
            if (snapshotsError.code === 'PGRST301') {
                console.error('‚ùå Table table_snapshots_index n\'existe pas');
                console.log('üí° Solution: Ex√©cutez le script SQL de configuration dans Supabase');
            } else if (snapshotsError.message.includes('permission')) {
                console.error('‚ùå Probl√®me de permissions (RLS)');
                console.log('üí° Solution: V√©rifiez les politiques RLS dans Supabase');
            }
            return;
        }
        
        console.log(`‚úÖ Table des snapshots accessible - ${snapshots.length} snapshots trouv√©s`);
        
        if (snapshots.length > 0) {
            console.log('üìã D√©tails des snapshots:');
            snapshots.forEach((snapshot, index) => {
                console.log(`  ${index + 1}. Date: ${snapshot.snapshot_date}, Lignes: ${snapshot.row_count}, Taille: ${snapshot.file_size_bytes} bytes`);
            });
        } else {
            console.log('‚ö†Ô∏è Aucun snapshot dans la base de donn√©es');
        }
        
        // 4. V√©rifier le stockage
        console.log('üîÑ V√©rification du bucket de stockage...');
        try {
            const { data: storageFiles, error: storageError } = await window.supabase.storage
                .from('table-snapshots')
                .list('', { limit: 10 });
            
            if (storageError) {
                console.error('‚ùå Erreur d\'acc√®s au stockage:', storageError);
            } else {
                console.log(`‚úÖ Stockage accessible - ${storageFiles.length} fichiers trouv√©s`);
                if (storageFiles.length > 0) {
                    console.log('üìÅ Fichiers dans le bucket:');
                    storageFiles.forEach((file, index) => {
                        console.log(`  ${index + 1}. ${file.name}`);
                    });
                }
            }
        } catch (storageError) {
            console.error('‚ùå Erreur lors de l\'acc√®s au stockage:', storageError);
        }
        
        // 5. V√©rifier la variable globale availableSnapshots
        console.log('üîÑ V√©rification de la variable availableSnapshots...');
        if (window.availableSnapshots) {
            console.log(`‚úÖ availableSnapshots: ${window.availableSnapshots.length} snapshots`);
            console.log('Contenu:', window.availableSnapshots);
        } else {
            console.log('‚ö†Ô∏è availableSnapshots n\'est pas d√©finie');
        }
        
        // 6. V√©rifier l'√©tat du bouton calendrier
        console.log('üîÑ V√©rification du bouton calendrier...');
        const calendarBtn = document.getElementById('snapshot-calendar-btn');
        const calendarBtnText = document.getElementById('calendar-btn-text');
        
        if (calendarBtn) {
            console.log('‚úÖ Bouton calendrier trouv√©');
            console.log('Texte actuel:', calendarBtnText ? calendarBtnText.textContent : 'Non trouv√©');
        } else {
            console.log('‚ùå Bouton calendrier non trouv√©');
        }
        
        console.log('‚úÖ Diagnostic termin√©');
        
    } catch (error) {
        console.error('‚ùå Erreur lors du diagnostic:', error);
    }
}

// Fonction pour forcer le rechargement des snapshots
async function forceReloadSnapshots() {
    console.log('üîÑ For√ßage du rechargement des snapshots...');
    
    try {
        if (typeof window.loadAvailableSnapshots === 'function') {
            await window.loadAvailableSnapshots();
            console.log('‚úÖ Rechargement forc√© termin√©');
        } else {
            console.error('‚ùå Fonction loadAvailableSnapshots non trouv√©e');
        }
    } catch (error) {
        console.error('‚ùå Erreur lors du rechargement forc√©:', error);
    }
}

// Fonction pour cr√©er un snapshot de test
async function createTestSnapshot() {
    console.log('üîÑ Cr√©ation d\'un snapshot de test...');
    
    try {
        if (typeof window.createDemoSnapshot === 'function') {
            await window.createDemoSnapshot();
            console.log('‚úÖ Snapshot de test cr√©√©');
        } else {
            console.error('‚ùå Fonction createDemoSnapshot non trouv√©e');
        }
    } catch (error) {
        console.error('‚ùå Erreur lors de la cr√©ation du snapshot de test:', error);
    }
}

// Exposer les fonctions globalement
window.debugSnapshots = debugSnapshots;
window.forceReloadSnapshots = forceReloadSnapshots;
window.createTestSnapshot = createTestSnapshot;

console.log('üìö Fonctions disponibles:');
console.log('  - debugSnapshots() : Diagnostic complet');
console.log('  - forceReloadSnapshots() : Forcer le rechargement');
console.log('  - createTestSnapshot() : Cr√©er un snapshot de test');
console.log('üí° Tapez debugSnapshots() dans la console pour commencer le diagnostic');
