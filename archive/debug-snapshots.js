// =====================================================
// SCRIPT DE DIAGNOSTIC COMPLET DES SNAPSHOTS
// =====================================================
// Ce script diagnostique pourquoi le site ne voit pas les snapshots
// et teste tous les aspects de la connexion Supabase

// Configuration Supabase
const SUPABASE_URL = 'https://fiecugxopjxzqfdnaqsu.supabase.co';
const SUPABASE_ANON_KEY = 'eyJhbGciOiJIUzI1NiIsInR5cCI6IkpXVCJ9.eyJpc3MiOiJzdXBhYmFzZSIsInJlZiI6ImZpZWN1Z3hvcGp4enFmZG5hcXN1Iiwicm9sZSI6ImFub24iLCJpYXQiOjE3NTQ1MDU2NTcsImV4cCI6MjA3MDA4MTY1N30.xd9Thasg4r8Nrwxx5nFwyGB_ufPIvok4XB-78dilpsw';

// Variables de diagnostic
let diagnosticResults = {
    connection: false,
    tableExists: false,
    tableAccess: false,
    snapshotsCount: 0,
    storageAccess: false,
    edgeFunction: false,
    errors: []
};

// Fonction principale de diagnostic
async function runFullSnapshotDiagnostic() {
    console.log('üîç D√âMARRAGE DU DIAGNOSTIC COMPLET DES SNAPSHOTS');
    console.log('=' .repeat(60));
    
    try {
        // 1. Test de connexion de base
        await testBasicConnection();
        
        // 2. Test d'existence de la table
        await testTableExistence();
        
        // 3. Test d'acc√®s √† la table
        await testTableAccess();
        
        // 4. Test du stockage
        await testStorageAccess();
        
        // 5. Test de la fonction Edge
        await testEdgeFunction();
        
        // 6. Test de la fonction loadAvailableSnapshots
        await testLoadAvailableSnapshots();
        
        // 7. G√©n√©rer le rapport final
        generateDiagnosticReport();
        
    } catch (error) {
        console.error('‚ùå Erreur lors du diagnostic:', error);
        diagnosticResults.errors.push(error.message);
        generateDiagnosticReport();
    }
}

// 1. Test de connexion de base
async function testBasicConnection() {
    console.log('\nüîå 1. TEST DE CONNEXION DE BASE');
    console.log('-'.repeat(30));
    
    try {
        const response = await fetch(`${SUPABASE_URL}/rest/v1/`, {
            headers: {
                'apikey': SUPABASE_ANON_KEY,
                'Authorization': `Bearer ${SUPABASE_ANON_KEY}`
            }
        });
        
        if (response.ok) {
            console.log('‚úÖ Connexion de base r√©ussie');
            diagnosticResults.connection = true;
        } else {
            throw new Error(`HTTP ${response.status}: ${response.statusText}`);
        }
        
    } catch (error) {
        console.error('‚ùå Erreur de connexion de base:', error.message);
        diagnosticResults.errors.push(`Connexion de base: ${error.message}`);
    }
}

// 2. Test d'existence de la table
async function testTableExistence() {
    console.log('\nüìã 2. TEST D\'EXISTENCE DE LA TABLE');
    console.log('-'.repeat(30));
    
    try {
        const response = await fetch(`${SUPABASE_URL}/rest/v1/table_snapshots_index?select=count`, {
            headers: {
                'apikey': SUPABASE_ANON_KEY,
                'Authorization': `Bearer ${SUPABASE_ANON_KEY}`
            }
        });
        
        if (response.ok) {
            console.log('‚úÖ Table table_snapshots_index existe');
            diagnosticResults.tableExists = true;
        } else if (response.status === 404) {
            console.error('‚ùå Table table_snapshots_index n\'existe pas');
            diagnosticResults.errors.push('Table table_snapshots_index n\'existe pas');
        } else {
            throw new Error(`HTTP ${response.status}: ${response.statusText}`);
        }
        
    } catch (error) {
        console.error('‚ùå Erreur lors du test d\'existence:', error.message);
        diagnosticResults.errors.push(`Test existence table: ${error.message}`);
    }
}

// 3. Test d'acc√®s √† la table
async function testTableAccess() {
    console.log('\nüîì 3. TEST D\'ACC√àS √Ä LA TABLE');
    console.log('-'.repeat(30));
    
    try {
        const response = await fetch(`${SUPABASE_URL}/rest/v1/table_snapshots_index?select=id,created_at&limit=5`, {
            headers: {
                'apikey': SUPABASE_ANON_KEY,
                'Authorization': `Bearer ${SUPABASE_ANON_KEY}`
            }
        });
        
        if (response.ok) {
            const data = await response.json();
            console.log(`‚úÖ Acc√®s √† la table r√©ussi - ${data.length} snapshots trouv√©s`);
            diagnosticResults.tableAccess = true;
            diagnosticResults.snapshotsCount = data.length;
            
            if (data.length > 0) {
                console.log('üìä Exemples de snapshots:');
                data.forEach((snap, index) => {
                    console.log(`   ${index + 1}. ID: ${snap.id}, Cr√©√©: ${snap.created_at}`);
                });
            }
        } else {
            throw new Error(`HTTP ${response.status}: ${response.statusText}`);
        }
        
    } catch (error) {
        console.error('‚ùå Erreur lors du test d\'acc√®s:', error.message);
        diagnosticResults.errors.push(`Test acc√®s table: ${error.message}`);
    }
}

// 4. Test du stockage
async function testStorageAccess() {
    console.log('\nüóÑÔ∏è 4. TEST DU STOCKAGE');
    console.log('-'.repeat(30));
    
    try {
        const response = await fetch(`${SUPABASE_URL}/storage/v1/bucket/table-snapshots`, {
            headers: {
                'apikey': SUPABASE_ANON_KEY,
                'Authorization': `Bearer ${SUPABASE_ANON_KEY}`
            }
        });
        
        if (response.ok) {
            console.log('‚úÖ Acc√®s au bucket table-snapshots r√©ussi');
            diagnosticResults.storageAccess = true;
            
            // Lister les fichiers
            const listResponse = await fetch(`${SUPABASE_URL}/storage/v1/object/list/table-snapshots?limit=5`, {
                headers: {
                    'apikey': SUPABASE_ANON_KEY,
                    'Authorization': `Bearer ${SUPABASE_ANON_KEY}`
                }
            });
            
            if (listResponse.ok) {
                const files = await listResponse.json();
                console.log(`üìÅ ${files.length} fichiers dans le bucket`);
                files.forEach((file, index) => {
                    console.log(`   ${index + 1}. ${file.name} (${file.metadata?.size || 'N/A'} bytes)`);
                });
            }
            
        } else {
            throw new Error(`HTTP ${response.status}: ${response.statusText}`);
        }
        
    } catch (error) {
        console.error('‚ùå Erreur lors du test du stockage:', error.message);
        diagnosticResults.errors.push(`Test stockage: ${error.message}`);
    }
}

// 5. Test de la fonction Edge
async function testEdgeFunction() {
    console.log('\n‚ö° 5. TEST DE LA FONCTION EDGE');
    console.log('-'.repeat(30));
    
    try {
        const response = await fetch(`${SUPABASE_URL}/functions/v1/snapshot_staff_table`, {
            method: 'POST',
            headers: {
                'apikey': SUPABASE_ANON_KEY,
                'Authorization': `Bearer ${SUPABASE_ANON_KEY}`,
                'Content-Type': 'application/json'
            },
            body: JSON.stringify({ test: true })
        });
        
        if (response.ok) {
            console.log('‚úÖ Fonction Edge snapshot_staff_table accessible');
            diagnosticResults.edgeFunction = true;
            
            const result = await response.json();
            console.log('üìä R√©ponse de la fonction:', result);
            
        } else {
            throw new Error(`HTTP ${response.status}: ${response.statusText}`);
        }
        
    } catch (error) {
        console.error('‚ùå Erreur lors du test de la fonction Edge:', error.message);
        diagnosticResults.errors.push(`Test fonction Edge: ${error.message}`);
    }
}

// 6. Test de la fonction loadAvailableSnapshots
async function testLoadAvailableSnapshots() {
    console.log('\nüîÑ 6. TEST DE LA FONCTION LOADAVAILABLESNAPSHOTS');
    console.log('-'.repeat(30));
    
    try {
        if (typeof window.loadAvailableSnapshots === 'function') {
            console.log('‚úÖ Fonction loadAvailableSnapshots trouv√©e dans window');
            
            // Tester l'ex√©cution
            console.log('üîÑ Ex√©cution de loadAvailableSnapshots...');
            await window.loadAvailableSnapshots();
            
            // V√©rifier le r√©sultat
            if (window.availableSnapshots && Array.isArray(window.availableSnapshots)) {
                console.log(`‚úÖ loadAvailableSnapshots ex√©cut√©e avec succ√®s - ${window.availableSnapshots.length} snapshots`);
            } else {
                console.log('‚ö†Ô∏è loadAvailableSnapshots ex√©cut√©e mais availableSnapshots non d√©fini');
            }
            
        } else {
            console.error('‚ùå Fonction loadAvailableSnapshots non trouv√©e dans window');
            diagnosticResults.errors.push('Fonction loadAvailableSnapshots non trouv√©e');
        }
        
    } catch (error) {
        console.error('‚ùå Erreur lors du test de loadAvailableSnapshots:', error.message);
        diagnosticResults.errors.push(`Test loadAvailableSnapshots: ${error.message}`);
    }
}

// 7. G√©n√©rer le rapport final
function generateDiagnosticReport() {
    console.log('\nüìä RAPPORT DE DIAGNOSTIC FINAL');
    console.log('=' .repeat(60));
    
    // R√©sum√© des tests
    console.log('üîç R√âSUM√â DES TESTS:');
    console.log(`   ‚úÖ Connexion de base: ${diagnosticResults.connection ? 'OK' : '‚ùå'}`);
    console.log(`   ‚úÖ Table existe: ${diagnosticResults.tableExists ? 'OK' : '‚ùå'}`);
    console.log(`   ‚úÖ Acc√®s table: ${diagnosticResults.tableAccess ? 'OK' : '‚ùå'}`);
    console.log(`   ‚úÖ Stockage: ${diagnosticResults.storageAccess ? 'OK' : '‚ùå'}`);
    console.log(`   ‚úÖ Fonction Edge: ${diagnosticResults.edgeFunction ? 'OK' : '‚ùå'}`);
    console.log(`   üìä Snapshots trouv√©s: ${diagnosticResults.snapshotsCount}`);
    
    // Diagnostic principal
    if (diagnosticResults.errors.length === 0) {
        console.log('\nüéâ DIAGNOSTIC: TOUT FONCTIONNE CORRECTEMENT');
        console.log('Le site devrait voir les snapshots. V√©rifiez:');
        console.log('   1. La console du navigateur pour les erreurs JavaScript');
        console.log('   2. Les politiques RLS dans Supabase');
        console.log('   3. La fonction loadAvailableSnapshots est-elle appel√©e?');
        
    } else {
        console.log('\nüö® DIAGNOSTIC: PROBL√àMES D√âTECT√âS');
        console.log('Erreurs trouv√©es:');
        diagnosticResults.errors.forEach((error, index) => {
            console.log(`   ${index + 1}. ${error}`);
        });
        
        console.log('\nüîß SOLUTIONS RECOMMAND√âES:');
        
        if (!diagnosticResults.connection) {
            console.log('   1. V√©rifiez SUPABASE_URL et SUPABASE_ANON_KEY');
        }
        
        if (!diagnosticResults.tableExists) {
            console.log('   2. Ex√©cutez simple-recreate-table.sql pour cr√©er la table');
        }
        
        if (!diagnosticResults.tableAccess) {
            console.log('   3. V√©rifiez les politiques RLS dans Supabase Dashboard');
        }
        
        if (!diagnosticResults.storageAccess) {
            console.log('   4. V√©rifiez les permissions du bucket table-snapshots');
        }
        
        if (!diagnosticResults.edgeFunction) {
            console.log('   5. Red√©ployez la fonction Edge Function');
        }
    }
    
    // Informations suppl√©mentaires
    console.log('\nüìã INFORMATIONS SUPPL√âMENTAIRES:');
    console.log(`   üåê URL Supabase: ${SUPABASE_URL}`);
    console.log(`   üîë Cl√© Anon: ${SUPABASE_ANON_KEY.substring(0, 20)}...`);
    console.log(`   üìÖ Diagnostic ex√©cut√©: ${new Date().toLocaleString('fr-FR')}`);
    
    // Afficher dans l'interface si possible
    if (typeof showMessage === 'function') {
        if (diagnosticResults.errors.length === 0) {
            showMessage('‚úÖ Diagnostic termin√© - Tout fonctionne correctement', 'success');
        } else {
            showMessage(`‚ùå Diagnostic termin√© - ${diagnosticResults.errors.length} probl√®me(s) d√©tect√©(s)`, 'error');
        }
    }
}

// Fonctions utilitaires pour les tests
function quickConnectionTest() {
    console.log('üöÄ Test de connexion rapide...');
    testBasicConnection();
}

function testTableOnly() {
    console.log('üìã Test de la table uniquement...');
    testTableExistence();
    testTableAccess();
}

function testStorageOnly() {
    console.log('üóÑÔ∏è Test du stockage uniquement...');
    testStorageAccess();
}

// Fonctions export√©es
window.runFullSnapshotDiagnostic = runFullSnapshotDiagnostic;
window.quickConnectionTest = quickConnectionTest;
window.testTableOnly = testTableOnly;
window.testStorageOnly = testStorageOnly;

// Instructions d'utilisation
console.log('üîç SCRIPT DE DIAGNOSTIC DES SNAPSHOTS CHARG√â');
console.log('==============================================');
console.log('üöÄ Utilisation:');
console.log('   runFullSnapshotDiagnostic() - Diagnostic complet');
console.log('   quickConnectionTest() - Test de connexion rapide');
console.log('   testTableOnly() - Test de la table uniquement');
console.log('   testStorageOnly() - Test du stockage uniquement');
console.log('');
console.log('üí° Commencez par: runFullSnapshotDiagnostic()');
console.log('‚úÖ Nouvelle cl√© API configur√©e!');
