// =====================================================
// SURVEILLANCE DU CRON APR√àS CORRECTION
// =====================================================
// Ce script surveille que le cron fonctionne maintenant correctement
// (quotidien √† 10h00 au lieu de chaque minute)

// Configuration Supabase
const SUPABASE_URL = 'https://fiecugxopjxzqfdnaqsu.supabase.co';
const SUPABASE_ANON_KEY = 'eyJhbGciOiJIUzI1NiIsInR5cCI6IkpXVCJ9.eyJpc3MiOiJzdXBhYmFzZSIsInJlZiI6ImZpZWN1Z3hvcGp4enFmZG5hcXN1Iiwicm9sZSI6ImFub24iLCJpYXQiOjE3NTQ1MDU2NTcsImV4cCI6MjA3MDA4MTY1N30.xd9Thasg4r8Nrwxx5nFwyGB_ufPIvok4XB-78dilpsw';

// Variables de surveillance
let monitoringActive = false;
let lastSnapshotTime = null;
let snapshotCount = 0;
let startTime = new Date();

// Fonction principale de surveillance
async function startCronMonitoring() {
    console.log('üïê D√âMARRAGE DE LA SURVEILLANCE DU CRON CORRIG√â');
    console.log('=' .repeat(60));
    console.log('üéØ Objectif: V√©rifier que le cron fonctionne quotidiennement √† 10h00');
    console.log('‚ùå Probl√®me pr√©c√©dent: Snapshots cr√©√©s chaque minute');
    console.log('‚úÖ Solution appliqu√©e: Nettoyage table + nouveau cron quotidien');
    
    monitoringActive = true;
    startTime = new Date();
    
    // V√©rifier l'√©tat initial
    await checkInitialState();
    
    // D√©marrer la surveillance en temps r√©el
    const monitorInterval = setInterval(async () => {
        if (!monitoringActive) {
            clearInterval(monitorInterval);
            return;
        }
        
        await checkForNewSnapshots();
    }, 30000); // V√©rifier toutes les 30 secondes
    
    // Arr√™t automatique apr√®s 2 heures
    setTimeout(() => {
        stopCronMonitoring();
    }, 7200000);
    
    console.log('üìä Surveillance active. Arr√™t automatique dans 2 heures...');
}

// Arr√™ter la surveillance
function stopCronMonitoring() {
    monitoringActive = false;
    console.log('‚èπÔ∏è Surveillance arr√™t√©e');
    generateMonitoringReport();
}

// V√©rifier l'√©tat initial
async function checkInitialState() {
    try {
        console.log('\nüîç V√âRIFICATION DE L\'√âTAT INITIAL');
        console.log('-'.repeat(40));
        
        const response = await fetch(`${SUPABASE_URL}/rest/v1/table_snapshots_index?select=*&order=created_at.desc&limit=10`, {
            headers: {
                'apikey': SUPABASE_ANON_KEY,
                'Authorization': `Bearer ${SUPABASE_ANON_KEY}`
            }
        });
        
        if (response.ok) {
            const snapshots = await response.json();
            console.log(`üìã ${snapshots.length} snapshots trouv√©s dans la table`);
            
            if (snapshots.length > 0) {
                const latest = snapshots[0];
                lastSnapshotTime = new Date(latest.created_at);
                console.log(`üìÖ Dernier snapshot: ${lastSnapshotTime.toLocaleString('fr-FR')}`);
                
                // Analyser la fr√©quence r√©cente
                if (snapshots.length > 1) {
                    const intervals = [];
                    for (let i = 0; i < Math.min(5, snapshots.length - 1); i++) {
                        const current = new Date(snapshots[i].created_at);
                        const next = new Date(snapshots[i + 1].created_at);
                        const intervalMinutes = (current - next) / 1000 / 60;
                        intervals.push(intervalMinutes);
                    }
                    
                    const avgInterval = intervals.reduce((a, b) => a + b, 0) / intervals.length;
                    console.log(`üìä Intervalle moyen r√©cent: ${avgInterval.toFixed(1)} minutes`);
                    
                    if (avgInterval < 2) {
                        console.log('üö® ALERTE: Pattern de cron chaque minute D√âTECT√â!');
                        console.log('üí° Le probl√®me n\'est pas encore r√©solu');
                    } else if (avgInterval > 1000) {
                        console.log('‚úÖ Pattern de cron quotidien normal d√©tect√©');
                    } else {
                        console.log('ü§î Pattern d\'ex√©cution interm√©diaire');
                    }
                }
            } else {
                console.log('‚úÖ Table vide - pr√™te pour le nouveau cron quotidien');
            }
        }
        
    } catch (error) {
        console.error('‚ùå Erreur lors de la v√©rification initiale:', error);
    }
}

// V√©rifier les nouveaux snapshots
async function checkForNewSnapshots() {
    try {
        const response = await fetch(`${SUPABASE_URL}/rest/v1/table_snapshots_index?select=*&created_at=gte.${startTime.toISOString()}&order=created_at.desc`, {
            headers: {
                'apikey': SUPABASE_ANON_KEY,
                'Authorization': `Bearer ${SUPABASE_ANON_KEY}`
            }
        });
        
        if (!response.ok) {
            throw new Error(`HTTP ${response.status}: ${response.statusText}`);
        }
        
        const newSnapshots = await response.json();
        
        // Filtrer les nouveaux snapshots
        const trulyNewSnapshots = newSnapshots.filter(snap => {
            if (!lastSnapshotTime) return true;
            return new Date(snap.created_at) > lastSnapshotTime;
        });
        
        if (trulyNewSnapshots.length > 0) {
            console.log(`\nüÜï ${trulyNewSnapshots.length} nouveau(x) snapshot(s) d√©tect√©(s):`);
            
            trulyNewSnapshots.forEach(snap => {
                const snapTime = new Date(snap.created_at);
                snapshotCount++;
                
                console.log(`‚è∞ ${snapTime.toLocaleString('fr-FR')} - ${snap.row_count} lignes`);
                
                // V√©rifier l'intervalle depuis le dernier snapshot
                if (lastSnapshotTime) {
                    const intervalHours = (snapTime - lastSnapshotTime) / 1000 / 60 / 60;
                    console.log(`   ‚è±Ô∏è Intervalle depuis le dernier: ${intervalHours.toFixed(2)} heures`);
                    
                    // D√©tecter si c'est encore un cron chaque minute
                    if (intervalHours < 0.1) { // Moins de 6 minutes
                        console.log('üö® ALERTE: Snapshot cr√©√© trop rapidement!');
                        console.log('üí° Le probl√®me de cron chaque minute persiste');
                    } else if (intervalHours > 20) { // Plus de 20 heures
                        console.log('‚úÖ Intervalle normal - probablement quotidien');
                    } else {
                        console.log('‚ö†Ô∏è Intervalle interm√©diaire - √† surveiller');
                    }
                }
                
                lastSnapshotTime = snapTime;
            });
            
            // V√©rifier la fr√©quence globale
            const timeSpan = (new Date() - startTime) / 1000 / 60 / 60;
            const frequency = snapshotCount / timeSpan;
            
            if (frequency > 50) {
                console.log('üö® PROBL√àME CONFIRM√â: Plus de 50 snapshots/heure!');
                console.log('üí° Le cron chaque minute n\'est pas encore corrig√©');
            } else if (frequency < 1) {
                console.log('‚úÖ Fr√©quence normale - moins d\'1 snapshot/heure');
            } else {
                console.log(`‚ö†Ô∏è Fr√©quence interm√©diaire: ${frequency.toFixed(2)} snapshots/heure`);
            }
        }
        
    } catch (error) {
        console.error('‚ùå Erreur lors de la v√©rification:', error);
    }
}

// G√©n√©rer le rapport final
function generateMonitoringReport() {
    console.log('\nüìä RAPPORT FINAL DE SURVEILLANCE');
    console.log('=' .repeat(50));
    
    const timeSpan = (new Date() - startTime) / 1000 / 60 / 60;
    const frequency = snapshotCount / timeSpan;
    
    console.log(`üìà Total de snapshots d√©tect√©s: ${snapshotCount}`);
    console.log(`‚è±Ô∏è Dur√©e de surveillance: ${timeSpan.toFixed(2)} heures`);
    console.log(`üìä Fr√©quence: ${frequency.toFixed(2)} snapshots/heure`);
    
    // Diagnostic final
    if (frequency > 50) {
        console.log('\nüö® PROBL√àME NON R√âSOLU');
        console.log('Le cron chaque minute fonctionne encore');
        console.log('üîß Actions recommand√©es:');
        console.log('   1. Ex√©cuter fix-cron-daily-only.sql dans Supabase');
        console.log('   2. Supprimer la fonction Edge via Dashboard');
        console.log('   3. Red√©ployer avec la bonne configuration');
        
    } else if (frequency < 1) {
        console.log('\n‚úÖ PROBL√àME R√âSOLU!');
        console.log('Le cron fonctionne maintenant correctement');
        console.log('üéØ Snapshots quotidiens √† 10h00');
        
    } else {
        console.log('\n‚ö†Ô∏è AM√âLIORATION PARTIELLE');
        console.log('La fr√©quence a diminu√© mais n\'est pas encore optimale');
        console.log('üîß Continuer la surveillance et appliquer les corrections');
    }
    
    // Recommandations
    console.log('\nüí° RECOMMANDATIONS:');
    if (frequency > 50) {
        console.log('   - Ex√©cuter le script SQL de correction');
        console.log('   - V√©rifier qu\'il n\'y a qu\'une seule fonction Edge');
        console.log('   - Surveiller les logs Supabase');
    } else {
        console.log('   - Continuer la surveillance');
        console.log('   - V√©rifier le prochain snapshot √† 10h00');
        console.log('   - Confirmer que la fr√©quence reste basse');
    }
}

// Fonctions utilitaires
function quickCheck() {
    console.log('üöÄ V√©rification rapide du cron...');
    checkInitialState();
}

function extendedMonitoring() {
    console.log('üîç Surveillance √©tendue (4 heures)...');
    startCronMonitoring();
    
    setTimeout(() => {
        stopCronMonitoring();
    }, 14400000); // 4 heures
}

// Fonctions export√©es
window.startCronMonitoring = startCronMonitoring;
window.stopCronMonitoring = stopCronMonitoring;
window.quickCheck = quickCheck;
window.extendedMonitoring = extendedMonitoring;

// Instructions d'utilisation
console.log('üïê SURVEILLANCE DU CRON APR√àS CORRECTION CHARG√âE');
console.log('==================================================');
console.log('üöÄ Utilisation:');
console.log('   startCronMonitoring() - Surveillance compl√®te (2h)');
console.log('   extendedMonitoring() - Surveillance √©tendue (4h)');
console.log('   quickCheck() - V√©rification rapide');
console.log('   stopCronMonitoring() - Arr√™ter la surveillance');
console.log('');
console.log('üí° Commencez par: startCronMonitoring()');
console.log('üéØ Objectif: Confirmer que le cron est maintenant quotidien');
