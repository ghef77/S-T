// =====================================================
// CORRECTION DES POLITIQUES RLS AVEC LA CL√â SERVICE ROLE
// =====================================================
// Ce script corrige les politiques RLS qui bloquent l'insertion
// des snapshots en utilisant la cl√© service role

// Configuration avec cl√© service role
const SUPABASE_URL = 'https://fiecugxopjxzqfdnaqsu.supabase.co';
const SUPABASE_SERVICE_KEY = 'eyJhbGciOiJIUzI1NiIsInR5cCI6IkpXVCJ9.eyJpc3MiOiJzdXBhYmFzZSIsInJlZiI6ImZpZWN1Z3hvcGp4enFmZG5hcXN1Iiwicm9sZSI6InNlcnZpY2Vfcm9sZSIsImlhdCI6MTc1NDUwNTY1NywiZXhwIjoyMDcwMDgxNjU3fQ.5m7nLHxHxOkxQf8maZis7Y7jynqu2dWqIzEbgWvOTcE';

// Fonction principale de correction RLS
async function fixRLSPolicies() {
    console.log('üîß D√âMARRAGE DE LA CORRECTION DES POLITIQUES RLS');
    console.log('=' .repeat(60));
    
    try {
        // 1. V√©rifier les politiques existantes
        await checkExistingPolicies();
        
        // 2. Supprimer les anciennes politiques
        await removeOldPolicies();
        
        // 3. Cr√©er les nouvelles politiques
        await createNewPolicies();
        
        // 4. V√©rifier que tout fonctionne
        await verifyPolicies();
        
        // 5. Test d'insertion
        await testInsertion();
        
        console.log('\nüéâ CORRECTION RLS TERMIN√âE AVEC SUCC√àS!');
        
    } catch (error) {
        console.error('‚ùå Erreur lors de la correction RLS:', error);
    }
}

// 1. V√©rifier les politiques existantes
async function checkExistingPolicies() {
    console.log('\nüîç 1. V√âRIFICATION DES POLITIQUES EXISTANTES');
    console.log('-'.repeat(40));
    
    try {
        const response = await fetch(`${SUPABASE_URL}/rest/v1/rpc/exec_sql`, {
            method: 'POST',
            headers: {
                'apikey': SUPABASE_SERVICE_KEY,
                'Authorization': `Bearer ${SUPABASE_SERVICE_KEY}`,
                'Content-Type': 'application/json'
            },
            body: JSON.stringify({
                query: `
                    SELECT 
                        'Politiques existantes' as info,
                        schemaname,
                        tablename,
                        policyname,
                        cmd,
                        permissive
                    FROM pg_policies 
                    WHERE tablename IN ('table_snapshots_index', 'snapshot_restore_log')
                    ORDER BY tablename, policyname;
                `
            })
        });
        
        if (response.ok) {
            const policies = await response.json();
            console.log(`üìã ${policies.length} politiques trouv√©es:`);
            policies.forEach(policy => {
                console.log(`   - ${policy.tablename}.${policy.policyname} (${policy.cmd})`);
            });
        } else {
            console.log('‚ö†Ô∏è Impossible de v√©rifier les politiques existantes');
        }
        
    } catch (error) {
        console.log('‚ö†Ô∏è Erreur lors de la v√©rification des politiques:', error.message);
    }
}

// 2. Supprimer les anciennes politiques
async function removeOldPolicies() {
    console.log('\nüóëÔ∏è 2. SUPPRESSION DES ANCIENNES POLITIQUES');
    console.log('-'.repeat(40));
    
    const policiesToRemove = [
        'DROP POLICY IF EXISTS "Allow public read access to snapshots" ON table_snapshots_index;',
        'DROP POLICY IF EXISTS "Allow authenticated insert to snapshots" ON table_snapshots_index;',
        'DROP POLICY IF EXISTS "Allow authenticated update to snapshots" ON table_snapshots_index;',
        'DROP POLICY IF EXISTS "Allow authenticated delete to snapshots" ON table_snapshots_index;',
        'DROP POLICY IF EXISTS "Allow public read access to restore log" ON snapshot_restore_log;',
        'DROP POLICY IF EXISTS "Allow authenticated insert to restore log" ON snapshot_restore_log;'
    ];
    
    for (const policy of policiesToRemove) {
        try {
            const response = await fetch(`${SUPABASE_URL}/rest/v1/rpc/exec_sql`, {
                method: 'POST',
                headers: {
                    'apikey': SUPABASE_SERVICE_KEY,
                    'Authorization': `Bearer ${SUPABASE_SERVICE_KEY}`,
                    'Content-Type': 'application/json'
                },
                body: JSON.stringify({ query: policy })
            });
            
            if (response.ok) {
                console.log(`‚úÖ Politique supprim√©e: ${policy.split(' ')[3]}`);
            } else {
                console.log(`‚ö†Ô∏è Impossible de supprimer: ${policy.split(' ')[3]}`);
            }
            
        } catch (error) {
            console.log(`‚ö†Ô∏è Erreur lors de la suppression: ${error.message}`);
        }
    }
}

// 3. Cr√©er les nouvelles politiques
async function createNewPolicies() {
    console.log('\n‚ûï 3. CR√âATION DES NOUVELLES POLITIQUES');
    console.log('-'.repeat(40));
    
    const newPolicies = [
        // Politiques pour table_snapshots_index
        `CREATE POLICY "snapshots_public_read" ON table_snapshots_index FOR SELECT USING (true);`,
        `CREATE POLICY "snapshots_public_insert" ON table_snapshots_index FOR INSERT WITH CHECK (true);`,
        `CREATE POLICY "snapshots_public_update" ON table_snapshots_index FOR UPDATE USING (true) WITH CHECK (true);`,
        `CREATE POLICY "snapshots_public_delete" ON table_snapshots_index FOR DELETE USING (true);`,
        
        // Politiques pour snapshot_restore_log
        `CREATE POLICY "restore_log_public_read" ON snapshot_restore_log FOR SELECT USING (true);`,
        `CREATE POLICY "restore_log_public_insert" ON snapshot_restore_log FOR INSERT WITH CHECK (true);`
    ];
    
    for (const policy of newPolicies) {
        try {
            const response = await fetch(`${SUPABASE_URL}/rest/v1/rpc/exec_sql`, {
                method: 'POST',
                headers: {
                    'apikey': SUPABASE_SERVICE_KEY,
                    'Authorization': `Bearer ${SUPABASE_SERVICE_KEY}`,
                    'Content-Type': 'application/json'
                },
                body: JSON.stringify({ query: policy })
            });
            
            if (response.ok) {
                console.log(`‚úÖ Politique cr√©√©e: ${policy.split('"')[1]}`);
            } else {
                console.log(`‚ö†Ô∏è Impossible de cr√©er: ${policy.split('"')[1]}`);
            }
            
        } catch (error) {
            console.log(`‚ö†Ô∏è Erreur lors de la cr√©ation: ${error.message}`);
        }
    }
}

// 4. V√©rifier que les politiques sont cr√©√©es
async function verifyPolicies() {
    console.log('\n‚úÖ 4. V√âRIFICATION DES NOUVELLES POLITIQUES');
    console.log('-'.repeat(40));
    
    try {
        const response = await fetch(`${SUPABASE_URL}/rest/v1/rpc/exec_sql`, {
            method: 'POST',
            headers: {
                'apikey': SUPABASE_SERVICE_KEY,
                'Authorization': `Bearer ${SUPABASE_SERVICE_KEY}`,
                'Content-Type': 'application/json'
            },
            body: JSON.stringify({
                query: `
                    SELECT 
                        'Nouvelles politiques' as info,
                        schemaname,
                        tablename,
                        policyname,
                        cmd,
                        permissive
                    FROM pg_policies 
                    WHERE tablename IN ('table_snapshots_index', 'snapshot_restore_log')
                    ORDER BY tablename, policyname;
                `
            })
        });
        
        if (response.ok) {
            const policies = await response.json();
            console.log(`üìã ${policies.length} nouvelles politiques cr√©√©es:`);
            policies.forEach(policy => {
                console.log(`   ‚úÖ ${policy.tablename}.${policy.policyname} (${policy.cmd})`);
            });
        } else {
            console.log('‚ö†Ô∏è Impossible de v√©rifier les nouvelles politiques');
        }
        
    } catch (error) {
        console.log('‚ö†Ô∏è Erreur lors de la v√©rification:', error.message);
    }
}

// 5. Test d'insertion pour v√©rifier que √ßa fonctionne
async function testInsertion() {
    console.log('\nüß™ 5. TEST D\'INSERTION');
    console.log('-'.repeat(40));
    
    try {
        // Test d'insertion dans la table
        const testData = {
            snapshot_date: new Date().toISOString().split('T')[0],
            object_path: 'test_rls_fix.json',
            row_count: 0,
            file_size_bytes: 0,
            metadata: { test: true, timestamp: new Date().toISOString() }
        };
        
        const response = await fetch(`${SUPABASE_URL}/rest/v1/table_snapshots_index`, {
            method: 'POST',
            headers: {
                'apikey': SUPABASE_SERVICE_KEY,
                'Authorization': `Bearer ${SUPABASE_SERVICE_KEY}`,
                'Content-Type': 'application/json'
            },
            body: JSON.stringify(testData)
        });
        
        if (response.ok) {
            const result = await response.json();
            console.log('‚úÖ Test d\'insertion r√©ussi!');
            console.log(`   ID cr√©√©: ${result[0].id}`);
            
            // Nettoyer le test
            await fetch(`${SUPABASE_URL}/rest/v1/table_snapshots_index?id=eq.${result[0].id}`, {
                method: 'DELETE',
                headers: {
                    'apikey': SUPABASE_SERVICE_KEY,
                    'Authorization': `Bearer ${SUPABASE_SERVICE_KEY}`
                }
            });
            console.log('üßπ Donn√©es de test nettoy√©es');
            
        } else {
            console.log(`‚ùå Test d'insertion √©chou√©: HTTP ${response.status}`);
        }
        
    } catch (error) {
        console.log('‚ö†Ô∏è Erreur lors du test d\'insertion:', error.message);
    }
}

// Fonctions utilitaires
function quickRLSFix() {
    console.log('üöÄ Correction RLS rapide...');
    fixRLSPolicies();
}

function checkPoliciesOnly() {
    console.log('üîç V√©rification des politiques uniquement...');
    checkExistingPolicies();
}

// Fonctions export√©es
window.fixRLSPolicies = fixRLSPolicies;
window.quickRLSFix = quickRLSFix;
window.checkPoliciesOnly = checkPoliciesOnly;

// Instructions d'utilisation
console.log('üîß SCRIPT DE CORRECTION RLS AVEC CL√â SERVICE ROLE CHARG√â');
console.log('==========================================================');
console.log('üöÄ Utilisation:');
console.log('   fixRLSPolicies() - Correction compl√®te des politiques RLS');
console.log('   quickRLSFix() - Correction rapide');
console.log('   checkPoliciesOnly() - V√©rification uniquement');
console.log('');
console.log('üí° Commencez par: fixRLSPolicies()');
console.log('‚úÖ Cl√© service role configur√©e!');
