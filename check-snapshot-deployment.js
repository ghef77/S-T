#!/usr/bin/env node

/**
 * Script de v√©rification du d√©ploiement de la fonction snapshot
 * V√©rifie si la fonction est accessible et fonctionnelle
 */

const https = require('https');

// Configuration
const SUPABASE_URL = 'https://fiecugxopjxzqfdnaqsu.supabase.co';
const FUNCTION_NAME = 'snapshot_staff_table';
const FUNCTION_URL = `${SUPABASE_URL}/functions/v1/${FUNCTION_NAME}`;

console.log('üîç V√©rification du d√©ploiement de la fonction snapshot...\n');

// Fonction pour faire une requ√™te HTTPS
function makeRequest(url, options = {}) {
    return new Promise((resolve, reject) => {
        const req = https.request(url, options, (res) => {
            let data = '';
            res.on('data', chunk => data += chunk);
            res.on('end', () => {
                resolve({
                    statusCode: res.statusCode,
                    headers: res.headers,
                    data: data
                });
            });
        });

        req.on('error', reject);
        req.end();
    });
}

// Test 1: V√©rifier l'accessibilit√© de la fonction
async function testFunctionAccessibility() {
    console.log('üì° Test 1: Accessibilit√© de la fonction...');
    
    try {
        const response = await makeRequest(FUNCTION_URL, {
            method: 'OPTIONS'
        });

        if (response.statusCode === 200) {
            console.log('‚úÖ Fonction accessible (CORS OK)');
            return true;
        } else {
            console.log(`‚ö†Ô∏è Fonction accessible mais statut: ${response.statusCode}`);
            return false;
        }
    } catch (error) {
        console.log(`‚ùå Erreur de connexion: ${error.message}`);
        return false;
    }
}

// Test 2: V√©rifier la r√©ponse de la fonction
async function testFunctionResponse() {
    console.log('\nüß™ Test 2: R√©ponse de la fonction...');
    
    try {
        const response = await makeRequest(FUNCTION_URL, {
            method: 'POST',
            headers: {
                'Content-Type': 'application/json'
            }
        });

        console.log(`üìä Statut HTTP: ${response.statusCode}`);
        
        if (response.statusCode === 200) {
            console.log('‚úÖ Fonction r√©pond correctement');
            try {
                const result = JSON.parse(response.data);
                console.log('üìã R√©ponse JSON:', JSON.stringify(result, null, 2));
            } catch (e) {
                console.log('üìã R√©ponse brute:', response.data);
            }
            return true;
        } else if (response.statusCode === 401) {
            console.log('üîê Authentification requise (normal)');
            return true;
        } else {
            console.log(`‚ö†Ô∏è Statut inattendu: ${response.statusCode}`);
            console.log('üìã R√©ponse:', response.data);
            return false;
        }
    } catch (error) {
        console.log(`‚ùå Erreur lors du test: ${error.message}`);
        return false;
    }
}

// Test 3: V√©rifier la configuration cron
async function checkCronConfiguration() {
    console.log('\n‚è∞ Test 3: Configuration Cron...');
    
    try {
        // V√©rifier le fichier cron.json local
        const fs = require('fs');
        const path = require('path');
        
        const cronFile = path.join(__dirname, 'supabase', 'functions', 'snapshot_staff_table', 'cron.json');
        
        if (fs.existsSync(cronFile)) {
            const cronConfig = JSON.parse(fs.readFileSync(cronFile, 'utf8'));
            console.log('üìÅ Configuration cron locale:', cronConfig);
            
            if (cronConfig.cron === '* * * * *') {
                console.log('‚úÖ Configuration cron correcte: chaque minute');
            } else {
                console.log(`‚ö†Ô∏è Configuration cron diff√©rente: ${cronConfig.cron}`);
            }
        } else {
            console.log('‚ùå Fichier cron.json non trouv√© localement');
        }
    } catch (error) {
        console.log(`‚ùå Erreur lors de la v√©rification cron: ${error.message}`);
    }
}

// Test 4: V√©rifier les logs Supabase
async function checkSupabaseLogs() {
    console.log('\nüìù Test 4: Logs Supabase...');
    console.log('‚ÑπÔ∏è Pour v√©rifier les logs, allez sur:');
    console.log(`   Dashboard Supabase ‚Üí Functions ‚Üí ${FUNCTION_NAME} ‚Üí Logs`);
    console.log('‚ÑπÔ∏è Ou utilisez la CLI:');
    console.log(`   supabase functions logs ${FUNCTION_NAME} --follow`);
}

// Test principal
async function runAllTests() {
    console.log('üöÄ D√©marrage des tests de d√©ploiement...\n');
    
    const test1 = await testFunctionAccessibility();
    const test2 = await testFunctionResponse();
    await checkCronConfiguration();
    await checkSupabaseLogs();
    
    console.log('\nüìä R√©sum√© des tests:');
    console.log(`   Accessibilit√©: ${test1 ? '‚úÖ' : '‚ùå'}`);
    console.log(`   R√©ponse: ${test2 ? '‚úÖ' : '‚ùå'}`);
    
    if (test1 && test2) {
        console.log('\nüéâ La fonction semble correctement d√©ploy√©e!');
        console.log('üí° V√©rifiez les logs Supabase pour confirmer l\'ex√©cution automatique.');
    } else {
        console.log('\n‚ö†Ô∏è Probl√®mes d√©tect√©s avec le d√©ploiement.');
        console.log('üîß Solutions possibles:');
        console.log('   1. D√©ployer la fonction: supabase functions deploy snapshot_staff_table');
        console.log('   2. V√©rifier les variables d\'environnement');
        console.log('   3. V√©rifier les permissions Supabase');
    }
}

// Ex√©cuter les tests
runAllTests().catch(console.error);
