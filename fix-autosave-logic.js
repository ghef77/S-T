// Logique corrig√©e pour √©viter l'autosave lors des changements de focus

// Fonction markEdited am√©lior√©e
function markEdited() {
    // CRITICAL: Ne pas marquer comme √©dit√© pendant la restauration du focus
    if (window._isRestoringFocus) {
        console.log('üö´ markEdited supprim√© - restauration du focus en cours');
        return;
    }
    
    // V√©rifier si c'est une vraie modification de contenu
    const activeElement = document.activeElement;
    if (activeElement && activeElement.tagName === 'TD' && activeElement.contentEditable === 'true') {
        const currentValue = activeElement.textContent;
        const originalValue = activeElement.dataset.originalValue;
        
        // Si originalValue n'est pas d√©fini, c'est probablement la premi√®re fois qu'on √©dite cette cellule
        // Dans ce cas, on permet l'√©dition
        if (originalValue !== undefined && currentValue === originalValue) {
            console.log('üö´ markEdited supprim√© - aucun changement de contenu d√©tect√©');
            return;
        }
        
        // V√©rification suppl√©mentaire : s'assurer que ce n'est pas juste un changement de focus
        if (originalValue !== undefined && Math.abs(currentValue.length - originalValue.length) <= 1) {
            // Si la diff√©rence de longueur est tr√®s petite, v√©rifier que c'est vraiment une modification
            if (currentValue === originalValue || currentValue === originalValue.trim()) {
                console.log('üö´ markEdited supprim√© - changement de focus d√©tect√©, pas de vraie modification');
                return;
            }
        }
        
        if (originalValue !== undefined) {
            console.log(`‚úÖ Modification d√©tect√©e: "${originalValue}" ‚Üí "${currentValue}"`);
        } else {
            console.log(`‚úÖ Premi√®re √©dition de la cellule: "${currentValue}"`);
        }
    }
    
    // Continuer avec l'autosave seulement si c'est une vraie modification
    isDirty = true; 
    isTyping = true; 
    lastEditAt = Date.now();
    
    if (typingTimer) clearTimeout(typingTimer);
    scheduleAutosaveCountdown();
    typingTimer = setTimeout(() => { isTyping = false; }, 1200);
}

// Fonction pour v√©rifier si une modification est l√©gitime
function isLegitimateEdit(cell, newValue) {
    const originalValue = cell.dataset.originalValue;
    
    // Si pas de valeur originale, c'est la premi√®re √©dition
    if (originalValue === undefined) {
        return true;
    }
    
    // Si la valeur n'a pas chang√©, ce n'est pas une modification
    if (newValue === originalValue) {
        return false;
    }
    
    // V√©rification pour les changements de focus (diff√©rences tr√®s petites)
    if (Math.abs(newValue.length - originalValue.length) <= 1) {
        // V√©rifier si c'est juste un changement de focus
        if (newValue === originalValue.trim() || newValue === originalValue) {
            return false;
        }
    }
    
    return true;
}

// Fonction pour mettre √† jour dataset.originalValue de mani√®re s√ªre
function updateOriginalValue(cell, newValue) {
    if (isLegitimateEdit(cell, newValue)) {
        cell.dataset.originalValue = newValue;
        console.log(`‚úÖ Valeur originale mise √† jour: "${newValue}"`);
        return true;
    } else {
        console.log(`üö´ Valeur originale non mise √† jour - modification non l√©gitime`);
        return false;
    }
}

// Logique pour les √©v√©nements blur
function handleBlurEvent(cell) {
    const currentValue = cell.textContent;
    const originalValue = cell.dataset.originalValue;
    
    // Sauvegarder seulement si la valeur a vraiment chang√©
    if (currentValue !== originalValue) {
        console.log(`‚úÖ Modification d√©tect√©e lors du blur: "${originalValue}" ‚Üí "${currentValue}"`);
        
        // Mettre √† jour la valeur originale
        cell.dataset.originalValue = currentValue;
        
        // D√©clencher l'autosave
        saveStateToHistory();
        saveLocalDraft();
        markEdited();
    } else {
        console.log(`üö´ Aucune modification lors du blur - valeur identique`);
    }
}

// Logique pour les √©v√©nements input
function handleInputEvent(cell) {
    const currentValue = cell.textContent;
    const originalValue = cell.dataset.originalValue;
    
    // V√©rifier que le contenu a vraiment chang√©
    if (currentValue === originalValue) {
        console.log(`üö´ Input ignor√© - aucun changement de contenu`);
        return;
    }
    
    console.log(`‚úÖ Input d√©tect√©: "${originalValue}" ‚Üí "${currentValue}"`);
    
    // Marquer comme modifi√©
    hasBeenModified = true;
    
    // Mettre √† jour la valeur originale
    cell.dataset.originalValue = currentValue;
    
    // Continuer avec la logique normale
    // ... (rest of the input logic)
}

console.log('‚úÖ Logique autosave corrig√©e charg√©e');
console.log('Fonctions disponibles:');
console.log('- markEdited() : Version am√©lior√©e avec d√©tection des vraies modifications');
console.log('- isLegitimateEdit(cell, newValue) : V√©rifie si une modification est l√©gitime');
console.log('- updateOriginalValue(cell, newValue) : Met √† jour la valeur originale de mani√®re s√ªre');
console.log('- handleBlurEvent(cell) : G√®re les √©v√©nements blur');
console.log('- handleInputEvent(cell) : G√®re les √©v√©nements input');
